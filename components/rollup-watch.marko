import fs from "fs";
static let watcher;
static let pendingManifest;
static function getLatestManifest(markoGlobal) {
  if (!watcher) {
    watcher = fs.watch(markoGlobal.__rollupManifest).on("change", () => {
      pendingManifest = undefined
      getLatestManifest(markoGlobal);
    });
  }

  return pendingManifest || (pendingManifest = fs.promises
    .readFile(markoGlobal.__rollupManifest, "utf-8")
    .then(JSON.parse)
    .catch(() =>
      new Promise(resolve => watcher.once("change", resolve))
        .then(() => getLatestManifest(markoGlobal))
    ));
}

$ const markoGlobal = out.global;
<await(getLatestManifest(markoGlobal))>
  <@then|manifest|>
    $ const entries = markoGlobal.__rollupEntries || (markoGlobal.__rollupEntries = []);
    $ let writtenEntries = 0;
    <__flush_here_and_after__>
      $ const lastWrittenEntry = writtenEntries;
      $ writtenEntries = entries.length;
      <for|i| from=lastWrittenEntry to=(writtenEntries - 1)>
        <${input.renderBody}(entries[i], ...manifest)/>
      </>
    </>
  </>
</>
